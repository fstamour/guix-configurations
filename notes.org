* Tasks

** TODO Keyboard

*** DONE Add caps-lock as compose-key

*** DONE Swap () and {}

*** TODO Update my xmodmap to add caps-lock as compose-key on certain hosts only

*** DONE xmodmap service doesn't work anymore

- I thinks it happens since I updated...
- OOOrrrr... since I'm using xsession...
- I only have the error =Service xmodmap could not be started.=

** DONE ssh-agent

** TODO Nvidia drivers

- To be able to change the brightness of the backlight
- I noticed that I can change the brightness of the screen in gdm
  (e.g. the keys work on the login screen).
- But xbacklight doesn't work...
- Maybe gdm uses wayland... and magically knows how to change the
  backlight's brightness...

** TODO Podman

For containers, obviously...

I might be able to get away with running =guix shell --container=

For now, on guixSD I'm using docker, and on ubuntu I'm using nix's
podman.

** TODO Emacs

*** TODO Use guix to install (most?) packages

*** TODO Clone my emacs configs

git@gitlab.com:fstamour/emacs-dot-files.git

**** TODO See if I can do that using guix-home for emacs

*** TODO Enable darkroom-mode and focus-mode with org-mode

maybe all text-modes?
maybe all programming modes???

** TODO fish is installed but is not in /etc/shells

So I can't chsh just yet...

** TODO Gforth 0.7.9 instead of 0.7.3

--with-source="mirror://gnu/gforth/gforth-0.7.9.tar.gz"
didn't work, the latest version in the mirrors were 0.7.3

--with-git-url=gforth="https://git.savannah.gnu.org/git/gforth/"

./autogen.sh: line 24: libtoolize: command not found
./autogen.sh: line 24: glibtoolize: command not found
./autogen.sh: line 30: aclocal: command not found

* TODO Dotfiles

** TODO tmux

** TODO guile

** TODO sbcl

** TODO fish

** TODO kitty?

** TODO ~/bin/

I said I was going to keep using gnu stow for these, because it's much
easier to update like thath (I think).

** TODO streamdeck

** TODO git

** TODO ssh?

** TODO vscode

** TODO xrandr script

* Snippets

#+begin_src shell
guix package --list-profiles
#+end_src


#+begin_src shell
guix package \
     -p $HOME/.config/guix/profiles/emacs \
     -m $HOME/.config/guix/manifests/emacs.scm
#+end_src

* Manifests

From guix cookbook:
> Using multiple, small profiles provides more flexibility and usability.

* REPL

#+begin_src shell
guix repl
#+end_src

#+begin_src scheme
  (use-modules
   (ice-9 pretty-print)
   (gnu))

    %base-groups
#+end_src


#+begin_src scheme
  (use-modules
   (ice-9 pretty-print)
   (gnu))

  (for-each (lambda (x) (pretty-print x)  (force-output)) %base-groups)
#+end_src


#+begin_src scheme
  (use-modules
   (ice-9 pretty-print)
   (gnu))

  (use-service-modules desktop)

  (for-each (lambda (x) (pretty-print x) (force-output)) %desktop-services)
#+end_src

* TODO LAN substitutes

https://dataswamp.org/~solene/2021-06-07-guix-packages-publish.html

no need to run =sudo guix archive --generate-key=

* TODO

sudo guix archive --authorize < modules/fstamour/nonguix-substitutes-signing-key.pub

* Whishlist/complains

** Shepherd Services are not 100% declarative

If you remove a service (e.g. cuirass) from your configuration
- the service will still be running
- you won't be able to use =herd= to stop it
- the service's state (e.g. =/var/lib/.../= and databases) won't be
  cleaned-up.
- it's not easy to figure out _how_ to cleanup these things
- that's one of the reasons trying out stuff in a container is
  advantageous

** Don't know how to see Shepherd's services' logs

** The "graphical" shepherd services starts in non-graphical contexts

** Cuirass

- I accidently disabled a specification, and I wasn't able to
  re-enable it...
- when an error occurs (e.g. bad specification), nothing is shown in
  the web UI, you have to "manually" look at the logs.
- it's hard to know what's going on (e.g. is it fetching the channel?
  evaluating it? is it building anything?)
- showing the logs would help a lot right out of the box

su -l cuirass -s /bin/sh
psql


sudo -u cuirass dropdb cuirass
sudo -u cuirass reatedb cuiras

** Guile's error message are aweful

Sometimes (most of the time) I don't even have a stack trace...

I lost a bunch of time because there was an error in an imported
(used) module, but the error was in the module imporing the faulty
module. Saying that the variable doesn't exist "did you forget to
(use-modules (the-faulty-module))" -_-
