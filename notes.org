* Tasks

** TODO Nvidia drivers

- To be able to change the brightness of the backlight
- I noticed that I can change the brightness of the screen in gdm
  (e.g. the keys work on the login screen).
- when using gnome, I can also change the brightness using the keys
  for that.
- But xbacklight doesn't work...
- Maybe gdm uses wayland... and magically knows how to change the
  backlight's brightness...

** TODO Podman

For containers, obviously...

I might be able to get away with running =guix shell --container=

For now, on guixSD I'm using docker, and on ubuntu I'm using nix's
podman.

** DONE Put ~/.config/guix under git

*** DONE Move into ~/dev/

** DONE Stumpwm

git@github.com:fstamour/stumpwm-config.git

** TODO Emacs

*** TODO Use guix to install (most?) packages

*** DONE Clone my emacs configs

git@gitlab.com:fstamour/emacs-dot-files.git

**** TODO See if I can do that using guix-home for emacs

That would be a single-shot shepherd home service... like xmodmap's
home-service.

*** TODO Enable darkroom-mode and focus-mode with org-mode

maybe all text-modes?
maybe all programming modes???

** DONE fish is installed but is not in /etc/shells

- You can set the a user's shell.
- There are some more configurations to do to make fish use guix's
  environment variables (see .

* Packages

** TODO streamdeck-ui

I've started something in [[file:modules/fstamour/streamdeck.scm][modules/fstamour/streamdeck.scm]]

** TODO Gforth 0.7.9 instead of 0.7.3

--with-source="mirror://gnu/gforth/gforth-0.7.9.tar.gz"
didn't work, the latest version in the mirrors were 0.7.3

--with-git-url=gforth="https://git.savannah.gnu.org/git/gforth/"

./autogen.sh: line 24: libtoolize: command not found
./autogen.sh: line 24: glibtoolize: command not found
./autogen.sh: line 30: aclocal: command not found

* Home Services

** TODO xmodmap

Note: xmodmap doesn't work with wayland

*** DONE Add caps-lock as compose-key

*** DONE Swap () and {}

*** TODO Update my xmodmap to add caps-lock as compose-key on certain hosts only

*** DONE xmodmap service doesn't work anymore

- I thinks it happens since I updated...
- OOOrrrr... since I'm using xsession...
- I only have the error =Service xmodmap could not be started.=

** DONE ssh-agent

- logs into =~/.local/state/shepherd/ssh-agent.log=
- should it be =~/.local/state/log/=?

* Dotfiles

** DONE tmux

** TODO guile

** TODO sbcl

** fish

*** DONE set guix-home's environment variables

** TODO kitty?

** TODO ~/bin/

I said I was going to keep using gnu stow for these, because it's much
easier to update like thath (I think).

** TODO streamdeck

** TODO [#A] git

** TODO ssh?

** TODO vscode

** TODO xrandr script

* TODO add "clean" targets to makfile

#+begin_src shell
./system delete-generations 1m
#+end_src

* Snippets

#+begin_src shell
guix package --list-profiles
#+end_src


#+begin_src shell
guix package \
     -p $HOME/.config/guix/profiles/emacs \
     -m $HOME/.config/guix/manifests/emacs.scm
#+end_src

* Manifests

From guix cookbook:
> Using multiple, small profiles provides more flexibility and usability.

* REPL

#+begin_src shell
guix repl
#+end_src

#+begin_src scheme
  (use-modules
   (ice-9 pretty-print)
   (gnu))

    %base-groups
#+end_src


#+begin_src scheme
  (use-modules
   (ice-9 pretty-print)
   (gnu))

  (for-each (lambda (x) (pretty-print x)  (force-output)) %base-groups)
#+end_src


#+begin_src scheme
  (use-modules
   (ice-9 pretty-print)
   (gnu))

  (use-service-modules desktop)

  (for-each (lambda (x) (pretty-print x) (force-output)) %desktop-services)
#+end_src

* TODO LAN substitutes

https://dataswamp.org/~solene/2021-06-07-guix-packages-publish.html

no need to run =sudo guix archive --generate-key=, it's done
automatically (on guixSD at least)

* TODO Document how to add substitute

for non-guixSD deployments

sudo guix archive --authorize < modules/fstamour/nonguix-substitutes-signing-key.pub

* Whishlist/complains

** Shepherd Services are not 100% declarative

If you remove a service (e.g. cuirass) from your configuration
- the service will still be running
- you won't be able to use =herd= to stop it
- the service's state (e.g. =/var/lib/.../= and databases) won't be
  cleaned-up.
- it's not easy to figure out _how_ to cleanup these things
- that's one of the reasons trying out stuff in a container is
  advantageous

** Don't know how to see Shepherd's services' logs

- =~/.local/state/log/shepherd.log=, when started from guix-home's
  =on-first-login= scripts, or
- =~/.local/state/shepherd/shepherd.log= otherwise

** The "graphical" shepherd services starts in non-graphical contexts

** Cuirass

- I accidently disabled a specification, and I wasn't able to
  re-enable it...
- when an error occurs (e.g. bad specification), nothing is shown in
  the web UI, you have to "manually" look at the logs.
- it's hard to know what's going on (e.g. is it fetching the channel?
  evaluating it? is it building anything?)
- showing the logs would help a lot right out of the box

su -l cuirass -s /bin/sh
psql


sudo -u cuirass dropdb cuirass
sudo -u cuirass reatedb cuiras

** Guile's error messages are aweful

Sometimes (most of the time) I don't even have a stack trace...

I lost a bunch of time because there was an error in an imported
(used) module, but the error was in the module imporing the faulty
module. Saying that the variable doesn't exist "did you forget to
(use-modules (the-faulty-module))" -_-

** I've had issues with shepherd's sockets

Sometimes, I can't run =herd= because shepherd's socket
(=/var/run/user/1000/shepherd/socket=) simply doesn't exist...

I have no idea how to reproduce this.

** Sometimes =herd= hangs

I don't know why, nor how to reproduce.

I ran =strace herd status=, and it seems to be waiting for an answer
from shepherd (on the socket).

#+begin_src text
socket(AF_UNIX, SOCK_STREAM, 0)         = 10
connect(10, {sa_family=AF_UNIX, sun_path="/run/user/1000/shepherd/socket"}, 32) = 0
getcwd("/home/fstamour/", 100) = 39
write(10, "(shepherd-command (version 0) (a"..., 129) = 129
read(10,
#+end_src

It hangs there, with the last line seeminly incomplete =read(10, =.

I deleted the socket.

shepherd is still running, but it didn't re-create the socket.

There's nothing in shepherd's logs.

=/run/user/1000/on-first-login-executed=

I _think_ it was because there were multiple services failing to start
repeatedly...

** the =herd= command could use some polish

- when you call =herd start= on a service that is disabled it just
  prints "failed to staet the service", in shepherd's logs, you can
  see "service is disabled". =herd= should tell the user *why* it
  wasn't able to start the service.
- =herd restart= could start the service if it is stopped instead of
  just printing "<service> is not running"

* How to fix ssh hostkey issues

Example error:

#+begin_src shell
> guix pull
Updating channel 'nonguix' from Git repository at 'https://gitlab.com/nonguix/nonguix'...
guix pull: error: Git error: invalid or unknown remote ssh hostkey
#+end_src

Example fix:

#+begin_src shell
ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
#+end_src

* TODO fix ABI mismatch

#+begin_src shell
exec /home/fstamour/.config/guix/current/bin/guix system build -e '(@@ (fstamour system) %hosts/phi)'
guix system: error: failed to evaluate expression '(@@ (fstamour system) %hosts/phi)':
In procedure abi-check: #<record-type <guix-configuration>>: record ABI mismatch; recompilation needed
#+end_src

It means the =guix-configuration= record is wrong.

Solution: delete guile's cache =rm -rf  ~/.cache/guile/ccache=
