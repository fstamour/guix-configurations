* Tasks

** TODO Emacs

** Home Services

*** TODO Create a home service to launch flameshot

*** DONE ssh-agent

- logs into =~/.local/state/shepherd/ssh-agent.log=
- should it be =~/.local/state/log/=?

** TODO add "clean" targets to makfile

#+begin_src shell
./system delete-generations 1m
#+end_src

** TODO add "clean-guile-cache" target to makefile

#+begin_src shell
rm -rf ~/.cache/guile/ccache
#+end_src

* Snippets

#+begin_src shell
guix package --list-profiles
#+end_src

#+begin_src shell
guix package \
     -p $HOME/.config/guix/profiles/emacs \
     -m $HOME/.config/guix/manifests/emacs.scm
#+end_src

* Manifests

From guix cookbook:
> Using multiple, small profiles provides more flexibility and usability.

* REPL

See [[file:dribble.scm][dribble.scm]]

#+begin_src shell
guix repl
#+end_src

#+begin_src scheme
  (use-modules
   (ice-9 pretty-print)
   (gnu))

    %base-groups
#+end_src


#+begin_src scheme
  (use-modules
   (ice-9 pretty-print)
   (gnu))

  (for-each (lambda (x) (pretty-print x)  (force-output)) %base-groups)
#+end_src


#+begin_src scheme
  (use-modules
   (ice-9 pretty-print)
   (gnu))

  (use-service-modules desktop)

  (for-each (lambda (x) (pretty-print x) (force-output)) %desktop-services)
#+end_src

* TODO LAN substitutes

https://dataswamp.org/~solene/2021-06-07-guix-packages-publish.html

no need to run =sudo guix archive --generate-key=, it's done
automatically (on guixSD at least)

* TODO Document how to add substitute

for non-guixSD deployments

#+begin_src shell
sudo guix archive --authorize < modules/fstamour/nonguix-substitutes-signing-key.pub
sudo guix archive --authorize < modules/fstamour/nu.pub
sudo guix archive --authorize < modules/fstamour/phi.pub
#+end_src

* add "substitute discovery" on ubuntu

Looking at the installer script
(https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh)
was very useful to figure out which file to change. For =systemd=, we
just need to add =--discover=yes= to the =ExecStart= line in
=/etc/systemd/system/guix-daemon.service=.

1. edit =guix-daemon.service=
2. =sudo systemctl daemon-reload=
3. =sudo systemctl restart guix-daemon=
4. =systemctl status guix-daemon=

* Whishlist/complains

** Shepherd Services are not 100% declarative

If you remove a service (e.g. cuirass) from your configuration
- the service will still be running
- you won't be able to use =herd= to stop it
- the service's state (e.g. =/var/lib/.../= and databases) won't be
  cleaned-up.
- it's not easy to figure out _how_ to cleanup these things
- that's one of the reasons trying out stuff in a container is
  advantageous

** Don't know how to see Shepherd's services' logs

- =~/.local/state/log/shepherd.log=, when started from guix-home's
  =on-first-login= scripts, or
- =~/.local/state/shepherd/shepherd.log= otherwise

** TODO The "graphical" shepherd services starts in non-graphical contexts

** Cuirass

- I accidently disabled a specification, and I wasn't able to
  re-enable it...
- when an error occurs (e.g. bad specification), nothing is shown in
  the web UI, you have to "manually" look at the logs.
- it's hard to know what's going on (e.g. is it fetching the channel?
  evaluating it? is it building anything?)
- showing the logs would help a lot right out of the box

su -l cuirass -s /bin/sh
psql

sudo -u cuirass dropdb cuirass
sudo -u cuirass reatedb cuiras

** Guile's error messages are awful

Sometimes (most of the time) I don't even have a stack trace...

I lost a bunch of time because there was an error in an imported
(used) module, but the error was in the module imporing the faulty
module. Saying that the variable doesn't exist "did you forget to
(use-modules (the-faulty-module))" -_-

** I've had issues with shepherd's sockets

Sometimes, I can't run =herd= because shepherd's socket
(=/var/run/user/1000/shepherd/socket=) simply doesn't exist...

I have no idea how to reproduce this.

** Sometimes =herd= hangs

I don't know why, nor how to reproduce.

I ran =strace herd status=, and it seems to be waiting for an answer
from shepherd (on the socket).

#+begin_src text
socket(AF_UNIX, SOCK_STREAM, 0)         = 10
connect(10, {sa_family=AF_UNIX, sun_path="/run/user/1000/shepherd/socket"}, 32) = 0
getcwd("/home/fstamour/", 100) = 39
write(10, "(shepherd-command (version 0) (a"..., 129) = 129
read(10,
#+end_src

It hangs there, with the last line seeminly incomplete =read(10, =.

I deleted the socket.

shepherd is still running, but it didn't re-create the socket.

There's nothing in shepherd's logs.

=/run/user/1000/on-first-login-executed=

I _think_ it was because there were multiple services failing to start
repeatedly...

** the =herd= command could use some polish

- when you call =herd start= on a service that is disabled it just
  prints "failed to staet the service", in shepherd's logs, you can
  see "service is disabled". =herd= should tell the user *why* it
  wasn't able to start the service.
- =herd restart= could start the service if it is stopped instead of
  just printing "<service> is not running"

* How to fix ssh hostkey issues

Example error:

#+begin_src shell
> guix pull
Updating channel 'nonguix' from Git repository at 'https://gitlab.com/nonguix/nonguix'...
guix pull: error: Git error: invalid or unknown remote ssh hostkey
#+end_src

Example fix:

#+begin_src shell
ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
#+end_src

* TODO fix ABI mismatch

#+begin_src shell
exec /home/fstamour/.config/guix/current/bin/guix system build -e '(@@ (fstamour system) %hosts/phi)'
guix system: error: failed to evaluate expression '(@@ (fstamour system) %hosts/phi)':
In procedure abi-check: #<record-type <guix-configuration>>: record ABI mismatch; recompilation needed
#+end_src

It means the =guix-configuration= record is wrong.

Solution: delete guile's cache =rm -rf  ~/.cache/guile/ccache=

* TODO add this to public notes

guix package -l
guix package -d

* How to install on non-guixSD


** How to use a shell installed with guix

As root:

#+begin_src shell
guix install fish
echo $(readlink -f /root/.guix-profile/bin/fish) >> /etc/shells
#+end_src

This step will need to be repeated if the root user's packages are
updated.

As user:

#+begin_src shell
chsh -s $(grep fish /etc/shells)
#+end_src

* Issue running chromium on ubuntu - "No usable sandbox!"

From https://issues.guix.gnu.org/44891:

1. sudo sysctl -w kernel.unprivileged_userns_clone=1
2. sudo su -c "echo 'kernel.unprivileged_userns_clone=1' > /etc/sysctl.d/00-local-userns.conf"

This is because (ungoogled-)chromium sandbox relies on user namespaces
support in the kernel but Debian [2] disables user namespaces by
default, the above commands enables them for your current boot session
and permanently for next reboots.
